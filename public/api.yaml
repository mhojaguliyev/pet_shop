openapi: "3.0.0"
info:
  version: 1.0.0
  title: Pet Shop API - Swagger Documentation
  description: API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification

servers:
  - url: /

paths:
  /api/v1/user/login:
    post:
      tags:
        - User
      summary: Login an User account
      operationId: user-login
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: User email
                password:
                  type: string
                  description: User password
              type: object
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: OK
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                      tokenType:
                        type: string
        422:
          $ref: '#/components/responses/UnprocessableEntity'
        500:
          $ref: '#/components/responses/ServerError'
      security: [ ]
  /api/v1/user/logout:
    post:
      tags:
        - User
      summary: Logout an User account
      operationId: user-logout
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Successfully logged out
                  data:
                    type: object
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'
      security: [ ]
  /api/v1/user:
    get:
      tags:
        - User
      summary: View a User account,
      operationId: user-read,
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: OK
                  data:
                    $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'
  /api/v1/categories:
    get:
      tags:
        - Categories
      summary: List all categories
      operationId: categories-listing
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: integer
        - name: limit
          required: false
          in: query
          schema:
            type: integer
        - name: sortBy
          required: false
          in: query
          schema:
            type: string
        - name: desc
          required: false
          in: query
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: OK
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        500:
          $ref: "#/components/responses/ServerError"
      security: [ ]
  /api/v1/products:
    get:
      tags:
        - Products
      summary: List all products
      operationId: products-listing
      parameters:
        - name: page
          required: false
          in: query
          schema:
            type: integer
        - name: limit
          required: false
          in: query
          schema:
            type: integer
        - name: sortBy
          required: false
          in: query
          schema:
            type: string
        - name: desc
          required: false
          in: query
          schema:
            type: boolean
        - name: category
          required: false
          in: query
          schema:
            type: string
        - name: price
          required: false
          in: query
          schema:
            type: integer
        - name: brand
          required: false
          in: query
          schema:
            type: string
        - name: title
          required: false
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: OK
                  data:
                    type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        500:
          $ref: "#/components/responses/ServerError"
      security: [ ]
  /api/v1/product/create:
    post:
      tags:
        - Products
      summary: Create a new product
      operationId: products-create
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - categoriesUuid
                - title
                - price
                - description
                - metadata
              properties:
                categoriesUuid:
                  type: string
                  description: Category UUID
                title:
                  type: string
                  description: Product title
                price:
                  type: number
                  description: Product price
                description:
                  type: string
                  description: Product description
                metadata:
                  type: object
                  properties:
                    image:
                      type: string
                    brand:
                      type: string
                  description: Product metadata
              type: object
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Created
                  data:
                    $ref: '#/components/schemas/Product'
        401:
          $ref: "#/components/responses/Unauthenticated"
        422:
          $ref: "#/components/responses/UnprocessableEntity"
        500:
          $ref: "#/components/responses/ServerError"
  /api/v1/product/{uuid}:
    put:
      tags:
        - Products
      summary: Update an existing product
      operationId: products-update
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - categoriesUuid
                - title
                - price
                - description
                - metadata
              properties:
                categoriesUuid:
                  type: string
                  description: Category UUID
                title:
                  type: string
                  description: Product title
                price:
                  type: number
                  description: Product price
                description:
                  type: string
                  description: Product description
                metadata:
                  type: object
                  properties:
                    image:
                      type: string
                    brand:
                      type: string
                  description: Product metadata
              type: object
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Created
                  data:
                    $ref: '#/components/schemas/Product'
        401:
          $ref: "#/components/responses/Unauthenticated"
        404:
          $ref: "#/components/responses/NotFound"
        422:
          $ref: "#/components/responses/UnprocessableEntity"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      tags:
        - Products
      summary: delete an existing product
      operationId: products-delete
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Deleted
                  data:
                    type: object
        401:
          $ref: "#/components/responses/Unauthenticated"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    get:
      tags:
        - Products
      summary: Fetch a product
      operationId: products-read
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: OK
                  data:
                    $ref: '#/components/schemas/Product'
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
      security: [ ]

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        uuid:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        isAdmin:
          type: boolean
        email:
          type: string
        emailVerifiedAt:
          type: string
        avatar:
          type: string
        address:
          type: string
        phoneNumber:
          type: string
        isMarketing:
          type: boolean
        createdAt:
          type: string
        updatedAt:
          type: string
        lastLoginAt:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
        uuid:
          type: string
        title:
          type: string
        slug:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    Product:
      type: object
      properties:
        id:
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        title:
          type: string
        uuid:
          type: string
        price:
          type: number
        description:
          type: string
        metadata:
          type: object
          default: {}
        createdAt:
          type: string
        updatedAt:
          type: string
    Pagination:
      type: object
      properties:
        page:
          type: integer
        lastPage:
          type: integer
        perPage:
          type: integer
        total:
          type: integer
        prevPageUrl:
          type: string
        nextPageUrl:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      name: bearerAuth
      in: header
      bearerFormat: JWT
      scheme: bearer
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Not Found
              data:
                type: object
    Forbidden:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Forbidden
              data:
                type: object
    Unauthenticated:
      description: Unauthenticated
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Unauthenticated
              data:
                type: object
    UnprocessableEntity:
      description: UnprocessableEntity
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Validation Error
              data:
                type: object
    ServerError:
      description: ServerError
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                default: Server Error
              data:
                type: object


tags:
  - name: User
    description: User API endpoint
  - name: Categories
    description: Categories API endpoint
  - name: Products
    description: Products API endpoint

security:
  - bearerAuth: [ ]


